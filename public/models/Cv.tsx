/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 cv.glb -t -r ./ 
*/

import * as THREE from 'three'
import React, { useRef, forwardRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Group } from 'three';


type GLTFResult = GLTF & {
  nodes: {
    Curve: THREE.Mesh
    Curve001: THREE.Mesh
    Curve002: THREE.Mesh
    Objeto_1002: THREE.Mesh
  }
  materials: {
    ['Tinta (3)']: THREE.MeshStandardMaterial
    ['Tinta (1).004']: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

type LogoProps = JSX.IntrinsicElements['group'] & {
  // Aquí puedes añadir cualquier otra prop personalizada si es necesario
};


export const CV = forwardRef<Group, LogoProps>((props, ref) => {
  const { nodes, materials } = useGLTF('models/cv.glb') as GLTFResult
  return (
    <group ref={ref} {...props} dispose={null}>
      {/* <mesh geometry={nodes.Curve.geometry} material={materials['Tinta (3)']} position={[1.479, 0.079, 0.021]} rotation={[Math.PI / 2, 0, 0]} scale={9.688} /> */}
      <mesh geometry={nodes.Curve001.geometry} material={materials['Tinta (3)']} position={[1.479, 0.079, 0.021]} rotation={[Math.PI / 2, 0, 0]} scale={9.688} />
      <mesh geometry={nodes.Curve002.geometry} material={materials['Tinta (3)']} position={[1.479, 0.079, 0.021]} rotation={[Math.PI / 2, 0, 0]} scale={9.688} />
      {/* <mesh geometry={nodes.Objeto_1002.geometry} material={materials['Tinta (1).004']} position={[1.334, 0, 0.025]} rotation={[Math.PI / 2, 0, 0]} scale={[0.01, 0.219, 0.01]} /> */}
    </group>
  )
});

useGLTF.preload('models/cv.glb')
