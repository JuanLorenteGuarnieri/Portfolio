/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 plane.glb -t -r ./ 
*/


import * as THREE from 'three'
import React, { forwardRef } from 'react'
import { useGLTF, Plane } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Group } from 'three';


type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh
  }
  materials: {
    ['SVGMat.002']: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>



type LogoProps = JSX.IntrinsicElements['group'] & {
};



export const Planee = forwardRef<Group, LogoProps>((props, ref) => {
  const { materials } = useGLTF('models/plane.glb') as GLTFResult
  const position: [number, number, number] = [0, 1, 35];
  const rotation: [number, number, number] = [0, 0, 0];
  const scale = 14;

  return (
    <group ref={ref} {...props}
      receiveShadow={true} castShadow={true}
      dispose={null}>

      <mesh>
        <Plane args={[100, 200]} rotation={rotation} scale={scale}
          position={position} material={materials['SVGMat.002']}>
        </Plane>
      </mesh>
    </group>
  )
});


useGLTF.preload('/plane.glb')
