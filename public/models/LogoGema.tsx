/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/logoGema.glb -t -r public 
*/

import * as THREE from 'three'
import React, { useRef, forwardRef } from 'react'
import { useGLTF, MeshRefractionMaterial, Loader, MeshReflectorMaterial } from '@react-three/drei'
import { GroupProps, ReactThreeFiber, useLoader } from '@react-three/fiber'
import * as A from '@react-three/fiber'
import { GLTF } from 'three-stdlib'
import { Group } from 'three';


type GLTFResult = GLTF & {
  nodes: {
    LogoCentro: THREE.Mesh
  }
  materials: {
    M_Logo: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

type LogoProps = JSX.IntrinsicElements['group'] & {
};



export const LogoGema = forwardRef<Group, LogoProps>((props, ref) => {
  const { nodes, materials } = useGLTF('models/logoGema.glb') as GLTFResult
  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh geometry={nodes.LogoCentro.geometry} material={materials.M_Logo} position={[0.49, 2.864, -1.438]} rotation={[-Math.PI / 2, 0, 0]} scale={[-1.038, -0.6, -1.475]} >
      </mesh>
    </group>
  )
});

useGLTF.preload('models/logoGema.glb')
